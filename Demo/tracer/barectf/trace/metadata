/* CTF 1.8 */

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015-2020 Philippe Proulx <pproulx@efficios.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 *
 * The following code was generated by barectf v3.1.1
 * on 2023-01-20T16:06:46.153461.
 *
 * For more details, see <https://barectf.org/>.
 */

trace {
	major = 1;
	minor = 8;
	byte_order = le;
	packet.header := struct {
		integer {
			signed = false;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} magic;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} stream_id;
	} align(8);
};

env {
	domain = "kernel";
	tracer_name = "barectf";
	tracer_major = 3;
	tracer_minor = 1;
	tracer_patch = 1;
	tracer_pre = "";
	barectf_gen_date = "2023-01-20T16:06:46.153461";
	sysname = "FreeRTOS";
};

clock {
	name = freertos_barectf;
	freq = 1000000000;
	precision = 0;
	offset_s = 0;
	offset = 0;
	absolute = false;
};

/* Data stream type `kernel` */
stream {
	id = 0;
	packet.context := struct {
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} packet_size;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} content_size;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
			map = clock.freertos_barectf.value;
		} timestamp_begin;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
			map = clock.freertos_barectf.value;
		} timestamp_end;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} events_discarded;
		integer {
			signed = false;
			size = 32;
			align = 32;
			byte_order = native;
			base = 10;
		} cpu_id;
	} align(8);
	event.header := struct {
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} id;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
			map = clock.freertos_barectf.value;
		} timestamp;
	} align(8);
};

event {
	stream_id = 0;
	id = 0;
	name = "sched_switch";
	fields := struct {
		string {
			encoding = UTF8;
		} prev_comm;
		integer {
			signed = false;
			size = 32;
			align = 32;
			byte_order = native;
			base = 10;
		} prev_tid;
		integer {
			signed = false;
			size = 32;
			align = 32;
			byte_order = native;
			base = 10;
		} prev_prio;
		integer {
			signed = false;
			size = 32;
			align = 32;
			byte_order = native;
			base = 10;
		} prev_state;
		string {
			encoding = UTF8;
		} next_comm;
		integer {
			signed = false;
			size = 32;
			align = 32;
			byte_order = native;
			base = 10;
		} next_tid;
		integer {
			signed = false;
			size = 32;
			align = 32;
			byte_order = native;
			base = 10;
		} next_prio;
	} align(1);
};
